

error_log /var/log/nginx/error.log warn;

events {
  worker_connections  1024;
  multi_accept        on;
  accept_mutex        on;
  accept_mutex_delay  500ms;
  use                 epoll;
  epoll_events        512;
}


http {
  include /etc/nginx/mime.types;

  default_type application/octet-stream;

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log /var/log/nginx/access.log main;

  keepalive_timeout  30s;
  keepalive_requests 30;
  send_timeout      30s;

  gzip on;
  gzip_comp_level  2;
  gzip_min_length  1000;
  gzip_types  text/xml text/css application/js;
  gzip_http_version 1.1;
  gzip_vary  on;
  gzip_disable "MSIE [4-6] \.";

  tcp_nopush  on;
  tcp_nodelay on;

  open_file_cache max=1000 inactive=30s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 4;
  open_file_cache_errors on;

  sendfile_max_chunk 512k;
  sendfile on;
  aio off; # This needs to be disabled for ubuntu, but would be helpful on a deb system
  directio 4m;
  directio_alignment 512;

  #
  # This setting limits the ingestion rate for client requests,
  # which helps maintain quality connection response time, and slows
  # down DDOS attacks (although DDOS prevention should be set at GCloud level).
  #
  # Important syntax:
  # - "zone" defines the memory allocation for client ip information
  # 16,000 addresses can be stored in 1m, so 10m allows 160,000 clients
  #
  # limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;

  server {
    listen 80;
    server_name alexkurata.com; #copeland.alexkurata.com;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    root /etc/nginx/html;

    #
    # This directive sets the buffer size for the request body.
    # If you plan to run the webserver on 64-bit systems, you need to set the value to 16k.
    # If you want to run the webserver on the 32-bit system, set the value to 8k.
    #
    client_body_buffer_size 16k;

    client_max_body_size 3m;
    client_body_in_single_buffer on;
    client_header_buffer_size  1m;
    large_client_header_buffers 4 8k;

    return 301 https://$host$request_uri;

    error_page 500 502 503 504  /50x.html;
    location = /50x.html {
      # limit_req zone=one;
      root /etc/nginx/html;
    }
  }


  server {
    listen 443 ssl;
    server_name alexkurata.com; #copeland.alexkurata.com;
    ssl_certificate     /etc/letsencrypt/live/alexkurata.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/alexkurata.com/privkey.pem;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    client_body_timeout 5s;
    client_header_timeout 5s;

    root /etc/nginx/html;

    # This directive sets the buffer size for the request body.
    # If you plan to run the webserver on 64-bit systems, you need to set the value to 16k.
    # If you want to run the webserver on the 32-bit system, set the value to 8k.
    client_body_buffer_size 16k;

    client_max_body_size 3m;
    client_body_in_single_buffer on;
    client_header_buffer_size  1m;
    large_client_header_buffers 4 8k;


    location /resume {
      try_files $uri /Resume.pdf =404;
    }


    location /Capitl.io/ {
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

      location ~* /.*\.(html|png|svg|woff|woff2|ttf|eot|otf|mp3|wav)$ {
        # Redirect static requests to an S3 bucket
        proxy_pass http://alexkurata.com.s3-website-us-east-1.amazonaws.com/Capitl.io/$1;
      }

      # Proxy non static requests to the api container
      proxy_pass https://localhost:4343;

    }


    location / {

      #
      # Important syntax:
      # - "burst" defines the number of requests that the server will allow in quick
      # succession. Due to the way nginx works, it samples valid requests in intervals
      # of 100ms, so if one request comes in and gets assigned to that buffer and another
      # client request comes in before the next available buffer it will return a 503 error.
      # To further control ingestion rates to be realistically proportional to the number of
      # requests required to load the angular application. Lazy loading however makes this
      # application very 'bursty'.
      #
      # - "delay" defines a wait period before enforcing the zone rate limiting rules.
      # This allows the application to have X seconds of freedom in request ingestion,
      # and then a stricter set of rules to prevent client abuse.
      #
      # limit_req zone=one burst=20 delay=5;

      # CORS Configuration
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        #
        # Custom headers and headers various browsers *should* be OK with but aren't
        #
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        #
        # Tell client that this pre-flight info is valid for 20 days
        #
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        return 204;
      }
      if ($request_method = 'GET') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
      }

      location ~ / {
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # TODO: Get url of S3 bucket to use for base site
        proxy_pass http://alexkurata.com.s3-website-us-east-1.amazonaws.com;
      }
    }

    error_page 500 502 503 504  /50x.html;
    location = /50x.html {
      # limit_req zone=one;
      root /etc/nginx/html;
    }
  }


}
